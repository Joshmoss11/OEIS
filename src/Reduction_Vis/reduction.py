# import python packages
from collections import Counter
import numpy as np

from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.manifold import MDS

import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib.colors as clrs
from mpl_toolkits.mplot3d import Axes3D
from scipy.cluster.hierarchy import dendrogram, linkage

# add to python environment the directory above the one the file is in (src)
import sys
import os
sys.path.append(os.path.dirname(__file__) + r"/..") 

#import OEIS files
import features as ftr
LABEL_FILE = os.path.dirname(__file__) + "/../../data/labels"
LABEL_NAMES_FILE = os.path.dirname(__file__) + "/../../data/label_names"

def main():
	features = ftr.read_features_file()
	general_field_names = ["name", "length"]
	feature_names = [name for (name, typ) in features[0].dtype.descr if name not in general_field_names]

	names = features[["name"]]
	X = ftr.extract_features(features, feature_names)
	X = X[0:50000,:]

	labels = np.asarray([i%100 for i in range(X.shape[0])])
	labels = read_labels(LABEL_FILE, LABEL_NAMES_FILE, names)

	tsne(names, X, labels, n_components=2)
	tsne(names, X, labels, n_components=3)
	hirerch_clustering(names,X,labels)
	mds(names, X, labels, n_components=2)

def read_labels(label_file, label_names_file, names):
	with open(label_names_file, "r") as fl:
		num2label = dict((tuple(line.split()) for line in fl))
	num2label["0"] = "other"

	with open(label_file, "r") as fl:
		name2num = dict((tuple(line.split()) for line in fl if len(line.split()) == 2))

	return np.asarray([num2label[name2num.get(name[0], 0)] for name in names])


def clean(X, names,labels):
	if labels is None:
		labels = np.asarray([0 for i in range(X.shape[0])])
	idxs = np.isfinite(X).all(axis=1)

	return X[idxs], names[idxs], labels[idxs]


def color_dendogram(D, labels):
	""" gets linkage matrix and labels and returns a function that for each ids returns a color"""
	colors = []
	for label in labels:
		colors.append(Counter([label]))
	for row in D:
		left = colors[int(row[0])]
		right = colors[int(row[1])]

		colors.append(left + right)

	pallete = rainbow_colors(labels)

	def colorer(idx):
		return clrs.rgb2hex(pallete[colors[idx].most_common(1)[0][0]])
	return colorer


def hirerch_clustering(names, X, labels=None, similarity='cosine', p=30):
	
	X,names,labels = clean(X,names,labels)

	D = linkage(X, 'average', similarity)
	plt.figure()
	colors = color_dendogram(D, labels)
	dendrogram(D, p=p, truncate_mode='lastp',leaf_rotation=90., link_color_func=colors, leaf_font_size=8., labels=names)
	plt.show()


def dim_red(names, X, model, title, labels=None):
	"""a general purpose dimensionality redusction visualizer
	params:
		names - names of sequences
		X - data matrix
		model - a model with the function fit_transform(X)
		title - title for the chart
		labels - labels for the sequences that define the coloring of the chart
	side effects:
		plots a scatter generated by the model and colored by the labels if dimension generated is 2 or 3
	return:
		the coordinates of the projectes sequences - X transformed by the model
	"""
	X,names,labels = clean(X,names,labels)	
	X_ts = model.fit_transform(X)
	plt_scatter(names, X_ts, title, labels)
	return X_ts

def mds(names, X, labels=None, n_components=2, legend=False):
	dim_red(names,X,MDS(n_components), "MDS Analysis", labels)


def tsne(names, X, labels=None, n_components=2, legend=False):
	"""runs a TSNE analysis"""
	dim_red(names,X,TSNE(n_components), "TSNE Analysis", labels)
	

def pca(names, X, labels=None, n_components=2, legend=False):	
	"""runs a PCA analysis on features"""
	dim_red(names,X,PCA(n_components),"PCA Analysis", labels)
	#print(model.explained_variance_ratio_)


def rainbow_colors(labels):
	"""creates colors, each corresponding to a unique label"""
	cls = set(labels)

	return dict(zip(cls, cm.rainbow(np.linspace(0, 1, len(cls)))))


def plt_scatter(names, X, title, labels=None, legend=False):
	if labels is None:
		labels = np.asarray([0 for i in range(X.shape[0])])

	colors = rainbow_colors(labels)
	fig = plt.figure()
	
	dims = X.shape[1]
	if dims == 2:
		for c, l in colors.iteritems():
			idx = labels == c
			plt.scatter(X[idx,0], X[idx,1], c=l, label=c)
		should_plot = True

	elif dims == 3:
		axis = fig.add_subplot(111, projection="3d")
		for c, l in colors.iteritems():
			idx = labels == c
			axis.scatter(X[idx,0], X[idx,1], X[idx,2], c=l, label=c)
		should_plot = True

	if should_plot:
		plt.title(title)
		if legend:
			plt.legend(fontsize="xx-small", ncol=2, loc=0)
		plt.show()


if __name__ == '__main__':
	main()